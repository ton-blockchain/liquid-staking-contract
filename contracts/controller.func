;; The validator has his own wallet on which he holds his own coins for operating.
;; From this wallet (s)he sends commands to this validator-controller (mostly `new_stake`, `update_validator_set` and `recover_stake`).
;; validator-controller contract must be in masterchain.
;; The validator in most cases have two validator-controllers (for even and odd validation rounds).


{-
 TODO:
   1) move config_param(1) to constants
   2) elector_address() can be optimized
-}

#include "stdlib.func";
#include "types.func";
#include "op-codes.func";
#include "messages.func";
#include "errors.func";
#include "asserts.func";
#include "network_config_utils.func";
#include "sudoer_requests.func";
#include "governor_requests.func";
#include "halter_requests.func";


const int ONE_TON = 1000000000;
const int ELECTOR_OPERATION_VALUE = 103 * ONE_TON / 100 ;
const int MIN_REQUEST_LOAN_VALUE = ONE_TON ; ;; should cover controller and pool gas
const int MIN_TONS_FOR_STORAGE = 2 * ONE_TON; ;; 2 TON
const int DEPOSIT_FEE = ONE_TON / 4; ;; 0.25 TON
const int WITHDRAWAL_FEE = ONE_TON / 4; ;; 0.25 TON
const int MIN_STAKE_TO_SEND = 50000 * ONE_TON; ;; 50 000 TON

;; Time in seconds for validator to make mandatory actions, such as
;; recover stake or update hash
const int GRACE_PERIOD = 600;
;; Fines for validator for overdue actions
const int HASH_UPDATE_FINE = 10 * ONE_TON;
const int STAKE_RECOVER_FINE = 10 * ONE_TON;

const int MAX_OVERDUE_FINE = (HASH_UPDATE_FINE * 3) + STAKE_RECOVER_FINE;
;; ENSURABLE_BALANCE_FOR_STAKING is expected to be on balance after sending new_stake request.
;; it includes
;;   - TON for pool storage
;;   - TON for possible fines which are paid to watchdogs during staking
;; we also add ELECTOR_OPERATION_VALUE to ensure room for computation fees
;; and storage fees on other contract we interact with
const int ENSURABLE_BALANCE_FOR_STAKING = MIN_TONS_FOR_STORAGE + MAX_OVERDUE_FINE + ELECTOR_OPERATION_VALUE;

;; Whole storage is put to global variables

global int state;
global int halted?;
global int approved?;

global int stake_amount_sent;
global int stake_at;

global int saved_validator_set_hash;
global int validator_set_changes_count;
global int validator_set_change_time;
global int stake_held_for;

global int borrowed_amount;
global int borrowing_time;

global slice sudoer;
global int sudoer_set_at;

global int max_expected_interest;

global slice static_data;
global int controller_id;
global slice validator;
global slice pool;
global slice governor;
global slice halter;
global slice approver;



const int state::REST = 0;
const int state::SENT_BORROWING_REQUEST = 1;
const int state::SENT_STAKE_REQUEST = 2;
const int state::FUNDS_STAKEN = 3;
const int state::SENT_RECOVER_REQUEST = 4;
const int state::INSOLVENT = 5;


() save_data() impure;
() load_data() impure;

slice elector_address();
int is_elector_address(slice address);
;;int max_recommended_punishment_for_validator_misbehaviour(int stake);
;;(int, int, int) get_validator_config();
;;int get_stake_held_for();
;;int get_elections_start_before();
;;(int, int, cell) get_current_validator_set();
int check_new_stake_msg(slice cs);

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();
    load_data();
    if (flags & 1) { ;; bounced messages
        if (in_msg_body.slice_bits() >= 64) {
            in_msg_body~skip_bounce(); ;; skip 0xFFFFFFFF bounced prefix
            int op = in_msg_body~load_op();
            if ((op == elector::new_stake) & (is_elector_address(sender_address))) {
                ;; `new_stake` from nominator-pool should always be handled without throws by elector
                ;; because nominator-pool do `check_new_stake_msg` and `msg_value` checks before sending `new_stake`.
                ;; If the stake is not accepted elector will send `new_stake_error` response message.
                ;; Nevertheless we do process theoretically possible bounced `new_stake`.

                if (state == state::SENT_STAKE_REQUEST) {
                    state = state::REST;
                } else {
                    halted? = true;
                }
            } elseif (equal_slice_bits(sender_address, pool)) {
              if(op == pool::loan_repayment) {
                borrowed_amount += msg_value;
                borrowing_time = now();
              } elseif (op == pool::request_loan) {
                if (state == state::SENT_BORROWING_REQUEST) {
                  state = state::REST;
                } else {
                  halted? = true;
                }
              }
            }
        }

        save_data();
        return (); ;; ignore other bounces messages
    }

    (int op, int query_id) = in_msg_body~load_body_header();

    if (is_elector_address(sender_address)) { ;; response from elector

            accept_message();

            if (op == elector::recover_stake_ok) {
                ;; Note, this request will be processed even in halted state
                state = state::REST;
                if( borrowed_amount ) {
                  if(balance >= MIN_TONS_FOR_STORAGE + borrowed_amount) {
                    send_msg(pool,
                             borrowed_amount, ;; TODO add fee???
                             begin_cell().store_body_header(pool::loan_repayment, query_id).end_cell(),
                             msgflag::BOUNCEABLE,
                             sendmode::PAY_FEES_SEPARATELY); ;; remaining inbound message amount, fee deducted from
                    borrowed_amount = 0;
                    borrowing_time = 0;
                    stake_amount_sent = 0;
                    stake_at = 0;
                  } else {
                    state = state::INSOLVENT;
                  }
                }
            } elseif (op == elector::recover_stake_error) {
                if(state == state::SENT_RECOVER_REQUEST) {
                    ;; The only case when we get elector::recover_stake_error is credits = 0
                    ;; in this case we should not return state to FUNDS_STAKEN to avoid
                    ;; further balance depletion due to repetitive STAKE_RECOVER_FINE
                    halted? = true;
                    state = state::INSOLVENT;
                } else {
                    halted? = true;
                }
            }

            if (state == state::SENT_STAKE_REQUEST) {
                if (op == elector::new_stake_error) { ;; error when new_stake; stake returned
                    state = state::REST;
                } elseif (op == elector::new_stake_ok) {
                    state = state::FUNDS_STAKEN;
                    ;; update saved_validator_set_hash in case it have changed
                    ;; while new_stake message reached the elector
                    (int utime_since, int utime_until, cell vset) = get_current_validator_set();
                    saved_validator_set_hash = cell_hash(vset);
                } else {
                    halted? = true;
                }
            }

            ;; else just accept coins from elector

    } else {

            if (op == controller::top_up) {
                in_msg_body.end_parse();
                if(state == state::INSOLVENT) {
                    ;; we add WITHDRAWAL_FEE below to ensure there is enough money to process
                    ;; and send bounty in return_unused_loan
                    if (balance > MIN_TONS_FOR_STORAGE + STAKE_RECOVER_FINE + borrowed_amount + WITHDRAWAL_FEE) {
                        state = state::REST;
                    }
                }
            } elseif (op == controller::credit) {
                assert_sender!(sender_address, pool);
                ;; borrowed_amount includes interest
                ifnot(borrowing_time) {
                  borrowing_time = now();
                }
                int credit_amount = in_msg_body~load_coins();
                borrowed_amount += credit_amount;
                in_msg_body.end_parse();
                throw_unless(error::credit_interest_too_high, credit_amount < muldiv(msg_value, max_expected_interest + SHARE_BASIS, SHARE_BASIS) + ONE_TON);
                max_expected_interest = 0;
                if(state == state::SENT_BORROWING_REQUEST) {
                  state = state::REST;
                }
            } elseif (op == controller::approve) {
                assert_sender!(sender_address, approver);
                ;; we do not end_parse here, because unprocessed data
                ;; in message maybe used for reason in offchain analytics
                approved? = true;
            }  elseif (op == controller::disapprove) {
                assert_sender!(sender_address, approver);
                ;; we do not end_parse here, because unprocessed data
                ;; in message maybe used for reason in offchain analytics
                approved? = false;
            } elseif (op == sudo::send_message) {
                process_sudo_request(sender_address, in_msg_body);
            } elseif (op == governor::set_sudoer) {
                process_set_sudo_request(sender_address, in_msg_body);
            }  elseif (op == governor::unhalt) {
                in_msg_body.end_parse();
                process_unhalt_request(sender_address);
            }  elseif (op == governor::return_available_funds) {
                assert_state!(state::INSOLVENT);
                assert_sender!(sender_address, governor);
                in_msg_body.end_parse();
                int available_funds = balance - MIN_TONS_FOR_STORAGE - WITHDRAWAL_FEE;
                available_funds = min( available_funds, borrowed_amount);
                send_msg(pool,
                        available_funds,
                        begin_cell().store_body_header(pool::loan_repayment, query_id).end_cell(),
                        msgflag::BOUNCEABLE,
                        sendmode::PAY_FEES_SEPARATELY); ;; remaining inbound message amount, fee deducted from
                borrowed_amount -= available_funds;
                if(borrowed_amount == 0) {
                    borrowing_time = 0;
                    state = state::REST;
                }
            }  elseif (op == halter::halt) {
                ;; we do not end_parse here, because unprocessed data
                ;; in message maybe used for reason in offchain analytics
                process_halt_request(sender_address);
            }  else {
                ;; actions above considered safe or critical enough to be processed in halted regime
                ;; actions below are only allowed for not halted controller
                assert_not_halted!();
                if (op == controller::recover_stake) { ;; send recover_stake to elector
                    assert_state!(state::FUNDS_STAKEN);
                    in_msg_body.end_parse();
                    ;; We need to take all credits from the elector at once,
                    ;; because if we do not take all at once, then it will be processed as a fine by pool.
                    ;; In the elector, credits (`credit_to`) are accrued in three places:
                    ;; 1) return of surplus stake in elections (`try_elect`)
                    ;; 2) reward for complaint when punish (`punish`) - before unfreezing
                    ;; 3) unfreeze round (`unfreeze_without_bonuses`/`unfreeze_with_bonuses`)
                    ;; We need to be guaranteed to wait for unfreezing round and only then send `recover_stake`.
                    ;; So we are waiting for the change of 3 validator sets.

                    ;; ADDITIONAL NOTE:
                    ;; In a special case (if the network was down), the config theoretically can refuse the elector to save a new round after election - https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/config-code.fc#L494
                    ;; and the elector will start a new election - https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L364
                    ;; in this case, our pool will have to skip the round, but it will be able to recover stake later

                    throw_unless(error::too_early_stake_recover_attempt_count, validator_set_changes_count >= 2);
                    int time_since_unfreeze = now() - validator_set_change_time - stake_held_for;
                    throw_unless(error::too_early_stake_recover_attempt_time, (validator_set_changes_count > 2) | (time_since_unfreeze > 60));
                    ;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L887
                    throw_unless(error::too_low_recover_stake_value, msg_value >= ELECTOR_OPERATION_VALUE);

                    cell payload = begin_cell().store_body_header(elector::recover_stake, query_id).end_cell();
                    send_msg(elector_address(),
                             0, ;; amount
                             payload,
                             msgflag::BOUNCEABLE,
                             sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE); ;; remaining inbound message amount, fee deducted from amount, revert on errors
                    state = state::SENT_RECOVER_REQUEST;
                    if( (time_since_unfreeze < GRACE_PERIOD) | (borrowed_amount == 0) ) {
                      assert_sender!(sender_address, validator);
                    } else {
                      if(balance - msg_value - STAKE_RECOVER_FINE >= MIN_TONS_FOR_STORAGE) {
                        ifnot( equal_slice_bits(sender_address, validator)) {
                          send_msg(sender_address, STAKE_RECOVER_FINE, null(), msgflag::NON_BOUNCEABLE, sendmode::IGNORE_ERRORS);
                        }
                      }
                    }

                } elseif (op == controller::update_validator_hash) {
                    assert_state!(state::FUNDS_STAKEN);
                    in_msg_body.end_parse();
                    throw_unless(error::too_much_validator_set_counts, validator_set_changes_count < 3);
                    (int utime_since, int utime_until, cell vset) = get_current_validator_set();
                    int current_hash = cell_hash(vset);
                    throw_unless(error::no_new_hash, saved_validator_set_hash != current_hash);
                    saved_validator_set_hash = current_hash;
                    validator_set_changes_count += 1;
                    validator_set_change_time = now();

                    ;; elector set 'stake_held_for' during election conduction
                    ;; we save it when sending stake and after first round change and chose max
                    ;; it's ok unless 'stake_held_for' will change twice: first one after sending stake
                    ;; but before election conduction and second one after election but prior update_hash
                    (_, int current_stake_held_for, _) = get_validator_config();
                    stake_held_for = max(stake_held_for, current_stake_held_for);


                    int overdue = now() - utime_since;
                    if( (overdue < GRACE_PERIOD) | (borrowed_amount == 0) ) {
                      assert_sender!(sender_address, validator);
                      send_excesses(sender_address);
                    } else {
                      if(balance - HASH_UPDATE_FINE >= MIN_TONS_FOR_STORAGE) {
                        ifnot( equal_slice_bits(sender_address, validator)) {
                          send_msg(sender_address, HASH_UPDATE_FINE, null(), msgflag::NON_BOUNCEABLE, sendmode::IGNORE_ERRORS);
                        }
                      }
                    }
                } elseif (op == controller::withdraw_validator) { ;; withdraw validator (after recover_stake and before new_stake)
                    assert_state!(state::REST);
                    throw_if(error::withdrawal_while_credited, borrowed_amount);
                    assert_sender!(sender_address, validator);
                    int request_amount = in_msg_body~load_coins();
                    in_msg_body.end_parse();
                    throw_unless(error::incorrect_withdrawal_amount, request_amount > 0);

                    raw_reserve(MIN_TONS_FOR_STORAGE, reservemode::AT_MOST);
                    send_msg(validator,
                             request_amount,
                             begin_cell().store_body_header(controller::validator_withdrawal, query_id).end_cell(),
                             msgflag::NON_BOUNCEABLE,
                             sendmode::REGULAR);

                } elseif (op == controller::new_stake) {
                    assert_state!(state::REST);
                    assert_sender!(sender_address, validator);

                    throw_unless(error::incorrect_new_stake::query_id, query_id); ;; query_id must be greater then 0 to receive confirmation message from elector

                    throw_unless(error::incorrect_new_stake::request_value,
                                 msg_value >= ELECTOR_OPERATION_VALUE); ;; must be greater then new_stake sending to elector fee

                    int value = in_msg_body~load_coins();

                    slice msg = in_msg_body;

                    stake_at = check_new_stake_msg(in_msg_body);

                    stake_amount_sent = value - ELECTOR_OPERATION_VALUE;

                    throw_unless(error::incorrect_new_stake::value_lt_minimum, value >= MIN_STAKE_TO_SEND);

                    int overdue_fine_and_storage = MAX_OVERDUE_FINE + MIN_TONS_FOR_STORAGE;

                    throw_unless(error::incorrect_new_stake::value_too_high, balance - value >=  overdue_fine_and_storage);
                    (_, stake_held_for, int elections_end_before) = get_validator_config();
                    (int utime_since, int utime_until, cell vset) = get_current_validator_set();
                    if (borrowed_amount) {
                      ;; it is allowed to use credit funds only in the same round when they were obtained
                      throw_unless(error::incorrect_new_stake::wrongly_used_credit,
                                  (borrowing_time > utime_since) & (now() < utime_until - elections_end_before));
                    }

                    int validator_own_funds = balance - borrowed_amount - overdue_fine_and_storage;

                    throw_unless(error::incorrect_new_stake::solvency_not_guaranteed,
                                 validator_own_funds >= max_recommended_punishment_for_validator_misbehaviour(stake_amount_sent));

                    state = state::SENT_STAKE_REQUEST;



                    saved_validator_set_hash = cell_hash(vset); ;; current validator set, we will be in next validator set
                    validator_set_changes_count = 0;
                    validator_set_change_time = utime_since;

                    send_msg(elector_address(),
                             value,
                             begin_cell().store_body_header(elector::new_stake, query_id).store_slice(msg).end_cell(),
                             msgflag::BOUNCEABLE,
                             sendmode::PAY_FEES_SEPARATELY); ;; pay fee separately, revert on errors

                } elseif (op == controller::send_request_loan) {
                  assert_state!(state::REST);
                  assert_sender!(sender_address, validator);
                  throw_unless(error::too_low_request_loan_value, msg_value >= MIN_REQUEST_LOAN_VALUE);
                  slice request = in_msg_body;
                  int min_loan = in_msg_body~load_coins();
                  int max_loan = in_msg_body~load_coins();
                  int max_interest = in_msg_body~load_share();
                  in_msg_body.end_parse();
                  max_expected_interest = max_interest;

                  throw_unless(error::controller_not_approved, approved?);

                  ;; For simplicity forbid multiple borrowing
                  ;; TODO
                  throw_if(error::multiple_loans_are_prohibited, borrowed_amount);

                  (int elections_start_before, _, int elections_end_before) = get_validator_config();
                  (int utime_since, int utime_until, cell vset) = get_current_validator_set();
                  throw_unless(error::too_early_loan_request, now() > utime_until - elections_start_before); ;; elections started
                  throw_unless(error::too_late_loan_request, now() < utime_until - elections_end_before);   ;; elections not yet closed


                  ;; lets check whether we can afford it
                  int elector_fine = max_recommended_punishment_for_validator_misbehaviour(max_loan + balance);
                  int interest_payment = muldiv(max_loan, max_interest, SHARE_BASIS);
                  int validator_amount = balance - borrowed_amount;
                  throw_unless(error::too_high_loan_request_amount, validator_amount >= ENSURABLE_BALANCE_FOR_STAKING + elector_fine + interest_payment);

                  cell payload = begin_cell()
                                             .store_body_header(pool::request_loan, query_id)
                                             .store_slice(request)
                                             .store_slice(static_data)
                                 .end_cell();
                  send_msg(pool,
                           0,
                           payload,
                           msgflag::BOUNCEABLE,
                           sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);
                  state = state::SENT_BORROWING_REQUEST;
                } elseif (op == controller::return_unused_loan) {
                    assert_state!(state::REST);
                    in_msg_body.end_parse();
                    throw_unless(error::no_credit, borrowed_amount);
                    (int utime_since, int utime_until, cell vset) = get_current_validator_set();
                    throw_unless(error::too_early_loan_return, utime_since > borrowing_time); ;; loan was requested in previous round
                    int overdue = now() - utime_since;
                    if(balance >= MIN_TONS_FOR_STORAGE + borrowed_amount) {
                      send_msg(pool,
                               borrowed_amount, ;; TODO add fee???
                               begin_cell().store_body_header(pool::loan_repayment, query_id).end_cell(),
                               msgflag::BOUNCEABLE,
                               sendmode::PAY_FEES_SEPARATELY); ;; remaining inbound message amount, fee deducted from
                      if(overdue < GRACE_PERIOD) {
                        assert_sender!(sender_address, validator);
                        send_excesses(sender_address);
                      } else {
                        if(balance >=  MIN_TONS_FOR_STORAGE + borrowed_amount + STAKE_RECOVER_FINE) {
                          ifnot( equal_slice_bits(sender_address, validator)) {
                            send_msg(sender_address, STAKE_RECOVER_FINE, null(), msgflag::NON_BOUNCEABLE, sendmode::IGNORE_ERRORS);
                          }
                        }
                      }
                      borrowed_amount = 0;
                      borrowing_time = 0;
                    } else {
                      state = state::INSOLVENT;
                    }
                } else {
                  throw(error::unknown_op);
                }
            }
    }

    save_data( );
}

() save_data() impure inline_ref {
    set_data(begin_cell()
        .store_uint(state, 8)
        .store_bool(halted?)
        .store_bool(approved?)
        .store_coins(stake_amount_sent)
        .store_timestamp(stake_at)
        .store_uint(saved_validator_set_hash, 256)
        .store_uint(validator_set_changes_count, 8)
        .store_timestamp(validator_set_change_time)
        .store_timestamp(stake_held_for)
        .store_coins(borrowed_amount)
        .store_timestamp(borrowing_time)
        .store_slice(sudoer)
        .store_timestamp(sudoer_set_at)
        .store_share(max_expected_interest)
        .store_slice(static_data)
        .end_cell());
}

() load_data() impure inline_ref {

    slice ds = get_data().begin_parse();
    state = ds~load_uint(8);
    halted? = ds~load_int(1);
    approved? = ds~load_int(1);

    stake_amount_sent = ds~load_coins();
    stake_at = ds~load_timestamp();

    saved_validator_set_hash = ds~load_uint(256);
    validator_set_changes_count = ds~load_uint(8);
    validator_set_change_time = ds~load_timestamp();
    stake_held_for = ds~load_timestamp();

    borrowed_amount = ds~load_coins();
    borrowing_time = ds~load_timestamp();

    sudoer = ds~load_msg_addr();
    sudoer_set_at = ds~load_timestamp();

    max_expected_interest = ds~load_share();

    static_data = ds;

    ds = ds~load_ref().begin_parse();

    controller_id = ds~load_uint(32);
    validator = ds~load_msg_addr();
    pool = ds~load_msg_addr();
    governor = ds~load_msg_addr();

    ds = ds~load_ref().begin_parse();

    approver = ds~load_msg_addr();
    halter = ds~load_msg_addr();
}


slice make_address(int wc, int addr) inline_ref {
    return begin_cell()
           .store_uint(4, 3).store_workchain(wc).store_uint(addr, ADDR_SIZE).end_cell().begin_parse();
}

slice elector_address() inline_ref {
    int elector = config_param(1).begin_parse().preload_uint(ADDR_SIZE);
    return make_address(MASTERCHAIN, elector);
}

;; https://github.com/ton-blockchain/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/block.tlb#L584
int is_elector_address(slice address) inline_ref {
  return equal_slice_bits(address, elector_address());
}


;; check the validity of the new_stake message
;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L208
int check_new_stake_msg(slice cs) impure inline_ref {
    var validator_pubkey = cs~load_uint(256);
    var stake_at = cs~load_uint(32);
    var max_factor = cs~load_uint(32);
    var adnl_addr = cs~load_uint(256);
    var signature = cs~load_ref().begin_parse().preload_bits(512);
    cs.end_parse();
    return stake_at; ;; supposed start of next validation round (utime_since)
}

;; Get methods

_ get_validator_controller_data() method_id {
    load_data();
    return (
      state, halted?, approved?,
      
      stake_amount_sent, stake_at,
      
      saved_validator_set_hash,
      validator_set_changes_count,
      validator_set_change_time,
      stake_held_for,
      
      borrowed_amount, borrowing_time,
      validator, pool, sudoer
      );
}

int get_max_punishment(int stake) method_id {
    return max_recommended_punishment_for_validator_misbehaviour(stake);
}

int get_max_stake_value() method_id {
    load_data();
    ifnot(state == state::REST) {
        return -1;
    }
    int balance = pair_first(get_balance());
    ;; we add ELECTOR_OPERATION_VALUE to ensure room for storage fees and so on
    int value = balance - ENSURABLE_BALANCE_FOR_STAKING;
    if(value < MIN_STAKE_TO_SEND) {
        return -1;
    }
    if (borrowed_amount) {
        (_, stake_held_for, int elections_end_before) = get_validator_config();
        (int utime_since, int utime_until, cell vset) = get_current_validator_set();
        ;; it is allowed to use credit funds only in the same round when they were obtained
        if((borrowing_time > utime_since) & (now() < utime_until - elections_end_before)) {
            return -1;
        }
    }
    ;; currently we skip checks related to max_recommended_punishment_for_validator_misbehaviour
    return value;
}

(int, int) required_balance_for_loan(int credit, int interest) method_id {
    load_data();
    int balance = pair_first(get_balance());
    int elector_fine = max_recommended_punishment_for_validator_misbehaviour(credit + balance);
    int interest_payment = muldiv(credit, interest, SHARE_BASIS);
    int validator_amount = balance - borrowed_amount;
    return (ENSURABLE_BALANCE_FOR_STAKING + elector_fine + interest_payment,
            validator_amount);
}


(int, int) request_window_time() method_id { ;; TODO: put it in recv_internal in request_loan operation
    ;; get time window (since, until) when controller may request loan
    (int elections_start_before, _, int elections_end_before) = get_validator_config();
    (int utime_since, int utime_until, _) = get_current_validator_set();
    return (utime_until - elections_start_before,
            utime_until - elections_end_before);
}
