() send_mint_message(slice minter, int query_id, slice destination, int amount, int notification_ton, int forward_ton, int total_ton, int mode) impure inline_ref {
    builder mint_request = begin_cell()
            .store_body_header(payout::mint, query_id)
            .store_slice(destination)
            .store_coins(amount) ;; max 124 bit
            .store_coins(notification_ton)
            .store_coins(forward_ton);
    var msg = begin_cell()
            .store_msg_flags(msgflag::BOUNCEABLE)
            .store_slice(minter)
            .store_coins(total_ton) ;;TRANSFER_NOTIFICATION_AMOUNT + JETTON_WALLET_FEE + MINT_FEE)
            .store_msgbody_prefix_slice()
            .store_builder(mint_request);
    send_raw_message(msg.end_cell(), mode); ;; pay transfer fees separately, revert on errors
}

() request_to_mint_pool_jettons(slice destination, int amount, int query_id, int for_user?) impure inline_ref {
    if (for_user?) {
        send_mint_message(jetton_minter, query_id, destination, amount,
                TRANSFER_NOTIFICATION_AMOUNT,
                0,
                0,
                sendmode::CARRY_ALL_BALANCE);
    } else {
        send_mint_message(jetton_minter, query_id, destination, amount,
                TRANSFER_NOTIFICATION_AMOUNT,
                0,
                TRANSFER_NOTIFICATION_AMOUNT + PAYOUT_DISTRIBUTION_AMOUNT,
                sendmode::REGULAR
        );
    }
    supply += amount;
}

() request_to_mint_deposit(slice destination, int amount, int query_id) impure inline {
    if(deposit_payout.null?()) {
        ;; we need to deploy new minter
        cell state_init = calculate_payout_state_init(my_address(), current_round_index(), true);
        slice to_address = calc_address(JETTONS_WORKCHAIN, state_init);
        deposit_payout = to_address;
        slice deposit_minter_jetton_wallet = calc_address(JETTONS_WORKCHAIN,
                calculate_jetton_wallet_state_init(to_address, jetton_minter, child_contract_codes.triple_second())
        );
        builder msg = begin_cell()
                .store_msg_flags(msgflag::BOUNCEABLE)
                .store_slice(deposit_payout)
                .store_coins(MINTER_DEPLOY_FEE)
                .store_msgbody_prefix_stateinit_slice(state_init)
                .store_body_header(payout::init, cur_lt())
                .store_ref(
                        begin_cell()
                                .store_bool(false) ;; distribution not started
                                .store_bool(true) ;; jettons
                                .store_coins(0)
                                .store_slice(deposit_minter_jetton_wallet)
                                .end_cell()
                );
        send_raw_message(msg.end_cell(), sendmode::REGULAR);
    }
    send_mint_message(deposit_payout, query_id, destination, amount,
            TRANSFER_NOTIFICATION_AMOUNT,
            0,
            0,
            sendmode::CARRY_ALL_BALANCE
    );
    requested_for_deposit += amount;
}

() request_to_mint_withdrawal(slice destination, int amount, int query_id) impure inline {
    if(withdrawal_payout.null?()) {
        ;; we need to deploy new minter
        cell state_init = calculate_payout_state_init(my_address(), current_round_index(), false);
        slice to_address = calc_address(JETTONS_WORKCHAIN, state_init);
        withdrawal_payout = to_address;
        builder msg = begin_cell()
                .store_msg_flags(msgflag::BOUNCEABLE)
                .store_slice(withdrawal_payout)
                .store_coins(MINTER_DEPLOY_FEE)
                .store_msgbody_prefix_stateinit_slice(state_init)
                .store_body_header(payout::init, cur_lt())
                .store_ref(
                        begin_cell()
                                .store_bool(false) ;; distribution not started
                                .store_bool(false) ;; not jettons
                                .store_coins(0)
                                .end_cell()
                );
        send_raw_message(msg.end_cell(), sendmode::REGULAR);
    }
    send_mint_message(withdrawal_payout, query_id, destination, amount,
            TRANSFER_NOTIFICATION_AMOUNT,
            0,
            0,
            sendmode::CARRY_ALL_BALANCE
    );
    requested_for_withdrawal += amount;
}
